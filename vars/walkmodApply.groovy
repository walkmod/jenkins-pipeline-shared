#!/usr/bin/env groovy

/**
 * Supports the "walkmodApply { validatePatch = true }" syntax.
 */
def call(body) {
    def config = [:]
    if (body != null) {
        body.resolveStrategy = Closure.DELEGATE_FIRST
        body.delegate = config
        body()
    }
    call(config)
}
        
/**
 *  Fixes the source code according the patch generated by WalkMod. By default,
 *  the script pushes the changes it if tests pass.
 */
def call(Map config = [:]) {
    def validatePatch = config.validatePatch?:false
    def reportDir = config.reportDir?:'target'
    def branch = config.branch?:'master'
    def alwaysApply = config.alwaysApply?:true
    def alwaysFail = config.alwaysFail?:true

    echo "Checking if there are WalkMod changes to apply"
    if (hasWalkModPatch()){

        echo "Generating WalkMod report"
        generateWalkModReport reportDir

        if(alwaysApply){

            if (validatePatch) {
                input "Does the patch look ok?"
            }

            echo "Applying the generated patch by WalkMod"
            applyWalkModPatch()

            echo "Running tests to see if patches work"
            sh "gradle test"

            echo "Pushing WalkMod changes"
            pushWalkModPatch branch
        }
        if (alwaysFail) {
            currentBuild.result = 'FAILURE'
            error("Build failed by the lack of consistent coding style")
        }

    }else{
        echo "Coding Style Status: SUCCESS"
    }


}
